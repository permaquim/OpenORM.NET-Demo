@page "/cruddboPais"
@inject ISnackbar Snackbar

@if (Pais_entities == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    if (crudMode == CrudMode.List)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Add" >Nuevo... </MudButton>
        <MudTable Items="Pais_entities" Hover="true" SortLabel="Sort By" Elevation="0"  Filter="new Func<AccesoADatos.Entities.Tables.dbo.Pais ,bool>(FilterFunc1)">
            <ToolBarContent>
            <MudText Typo="Typo.h6">Customers</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="buscar..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent> 
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AccesoADatos.Entities.Tables.dbo.Pais, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AccesoADatos.Entities.Tables.dbo.Pais, object>(x=>x.Nombre)">Nombre</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AccesoADatos.Entities.Tables.dbo.Pais, object>(x=>x.ContinenteId)">ContinenteId</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>Edit(@context.Id,false))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(()=>Edit(@context.Id,true))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
            <MudTd DataLabel="ContinenteId">@(Continente_entities.FirstOrDefault(c => c.Id == @context.ContinenteId).Nombre)</MudTd>
            <MudTd DataLabel="">
                <MudFab @onclick="@(()=>Edit(@context.Id,false))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                <MudFab @onclick="@(()=>Edit(@context.Id,true))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10,20,50,100}" />
        </PagerContent>
    </MudTable>
    }

    if(crudMode==CrudMode.Add || crudMode==CrudMode.Edit || crudMode==CrudMode.Delete)
    {
        <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.inherit">"@(GetDialogTitle())" </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="Pais_entity.Id" Label="Id" Variant="Variant.Text" Margin="Margin.Normal" Disabled="true" ></MudTextField>
            <MudTextField @bind-Value="Pais_entity.Nombre" Label="Nombre" Variant="Variant.Text" Margin="Margin.Normal" Disabled="@(crudMode == CrudMode.Edit || crudMode == CrudMode.Add ? false : true)"></MudTextField>
            <MudSelect HelperText="Seleccione un elemento" T="AccesoADatos.Entities.Tables.dbo.Continente" @bind-Value="@Continente_entity" @bind-Text="@Continente_entity.Nombre" SelectedValuesChanged="@(()=>SelectContinenteValueChanged(Continente_entity))" Disabled="@(crudMode == CrudMode.Edit || crudMode == CrudMode.Add ? false : true)" >
                    @foreach(var item in Continente_entities)
                    {
                        <MudSelectItem Value="@item">@item.Nombre</MudSelectItem>
                    }
            </MudSelect>      
            
            <br />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Aceptar</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancelar</MudButton>
        </MudCardContent>
        </MudCard>
    }
}

@code {
    /// <summary>
    /// Crud Mode Enum
    /// </summary>
    private enum CrudMode
    {
        List,
        Add,
        Edit,
        Delete
    }
    /// <summary>
    /// Variables to handle main entity
    /// </summary>
    private AccesoADatos.Entities.Tables.dbo.Pais Pais_entity = new();
    private List<AccesoADatos.Entities.Tables.dbo.Pais> Pais_entities = null;
    /// <summary>
    /// Variables to handle Relation between Id and Continente
    /// </summary>
    private AccesoADatos.Entities.Tables.dbo.Continente Continente_entity = new();
    private List<AccesoADatos.Entities.Tables.dbo.Continente> Continente_entities = null;


    private string searchString =string.Empty;
    /// <summary>
    ///  Page crud mode {List,Add,Edit, Delete,}
    /// </summary>
    private CrudMode crudMode = CrudMode.List;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadMainEntityData);
        await Task.Run(LoadTypesData);
    }
    #region Loading entities data
    /// <summary>
    /// Loads main entity data
    /// </summary>
    private void LoadMainEntityData()
    {
        AccesoADatos.Business.Tables.dbo.Pais entity = new();
        Pais_entities = entity.Items();
    }
    /// <summary>
    /// Loads TypeTable data
    /// </summary>
    private void LoadTypesData()
    {
        AccesoADatos.Business.Tables.dbo.Continente Continente_local = new();
        Continente_entities = Continente_local.Items();

    }

    #endregion

    /// <summary>
    /// Initializations for adding a new entity
    /// </summary>
    private void Add()
    {
        //Main entity initialization
        Pais_entity = new();
        //Relations entities initialization
        Continente_entity = new(); 
        crudMode = CrudMode.Add;
    }
    /// <summary>
    /// Initializations for editing an entity
    /// </summary>
    private void Edit(long id, bool delete)
    {
        Pais_entity = Pais_entities.FirstOrDefault(c => c.Id == id);

            Continente_entity = new() { 
            Id = Continente_entities.FirstOrDefault(c => c.Id == Pais_entity.ContinenteId).Id, 
            Nombre = Continente_entities.FirstOrDefault(c => c.Id == Pais_entity.ContinenteId).Nombre
            };
        if (delete)
            crudMode = CrudMode.Delete;
        else
            crudMode = CrudMode.Edit;
    }
    /// <summary>
    /// Operation depending on Crud mode
    /// </summary>
    private void Save()
    {
        string actionInformation = string.Empty;
        AccesoADatos.Business.Tables.dbo.Pais crud = new();
        switch (crudMode)
        {
            case CrudMode.Add:
                crud.Add(Pais_entity);
                actionInformation = "agregado.";
                break;
            case CrudMode.Edit:
                crud.Update(Pais_entity);
                actionInformation = "modificado.";
                break;
            case CrudMode.Delete:
                crud.Delete(Pais_entity);
                actionInformation = "eliminado.";
                break;
        }

        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Add("El registro ha sido " + actionInformation, Severity.Success);

        // Sets Crud mode to List
        crudMode = CrudMode.List;
        
        LoadMainEntityData();
    }
    /// <summary>
    /// Crud mode cancellation and default mode
    /// </summary>
    private void Cancel()
    {
        crudMode = CrudMode.List;  
        LoadMainEntityData();
    }
    /// <summary>
    /// Sets detail panel title - TODO: Implement Multilanguage
    /// </summary>
    /// <returns></returns>
    private string GetDialogTitle()
    {
        string retValue = string.Empty;
        switch (crudMode)
        {
            case CrudMode.Add:
                retValue = "Nuevo...";
                break;
            case CrudMode.Edit:
                retValue = "Editar...";
                break;
            case CrudMode.Delete:
                retValue = "Borrar...";
                break;
        }
        return retValue;
    }

    #region Selection events
    /// <summary>
    /// Continente value changed
    /// </summary>
    /// <param name="item"></param>
    private void SelectContinenteValueChanged(AccesoADatos.Entities.Tables.dbo.Continente item)
    {
        Pais_entity.ContinenteId = Continente_entities.FirstOrDefault(c => c.Nombre == item.Nombre).Id;
    }

    #endregion

    #region Table filtering implementation
    
    private bool FilterFunc1(AccesoADatos.Entities.Tables.dbo.Pais element) => FilterFunc(element, searchString);

    private bool FilterFunc(AccesoADatos.Entities.Tables.dbo.Pais element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (!string.IsNullOrWhiteSpace(element.Nombre) && element.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{ element.ContinenteId} ".Contains(searchString))
            return true;
        return false;
    }
    #endregion
}

